import random

import psycopg2 as psycopg2
import telebot
from telebot import types
from dotenv import load_dotenv
import os


load_dotenv()

bot = telebot.TeleBot(os.getenv('TOKEN'))

# –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
connection = psycopg2.connect(
            host=os.getenv('host'),
            user=os.getenv('user'),
            password=os.getenv('password'),
            database=os.getenv('database'))

animal = {} # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã
with connection.cursor() as cursor:
    cursor.execute('select count(id_question)/4 from question')  # –Ω–∞—Ö–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    count = (cursor.fetchone())[0]
    cursor.execute("SELECT animal_name FROM animals")  # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Å–ª–æ–≤–∞—Ä—å
    animal_names = cursor.fetchall()
    for animal_name in animal_names:
        animal[animal_name[0]] = []
i = 0 #–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
username = '' #–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
review = '' #–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞

#–ü—Ä–æ—Å—Ç–µ–Ω—å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
def analytics(func: callable):
    total_messages = 0
    users = set()
    tottal_users = 0

    def analytics_wrapper(message):
        nonlocal total_messages, tottal_users
        total_messages +=1

        if message.chat.id not in users:
            users.add(message.chat.id)
            tottal_users +=1
        print(f"–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text} \
        –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages} \
              –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {tottal_users}")

        return func(message)
    return analytics_wrapper


@bot.message_handler(commands=['start'])
@analytics
def start(message):
    with open('HakatonZoo\photo_2023-06-13_12-14-34.jpg', 'rb') as f:
        photo = bot.send_photo(message.chat.id, f)
    murkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')
    btn2 = types.KeyboardButton('‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å‚ùì')
    btn3 = types.KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ')
    btn4 = types.KeyboardButton('–û—Ç–∑—ã–≤—ã')
    murkup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id,
                     text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–∏–º–æ—Ñ–µ–π, —è –º–∞–Ω—É–ª, —è–≤–ª—è—é—Å—å —Å–∏–º–≤–æ–ª–æ–º –∑–æ–æ–ø–∞—Ä–∫–∞ —Å 1983 (–∏–ª–∏ –∫–∞–∫–æ–≥–æ —Ç–∞–º) –≥–æ–¥–∞. –ò —Å–µ–≥–æ–¥–Ω—è —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µüòè –ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—Éüòä".format(
                         message.from_user, photo),
                     reply_markup=murkup)


@bot.message_handler(content_types=['text'])
@analytics
def func(message):
    if message.text == '–û—Ç–∑—ã–≤—ã':
        bot.send_message(message.from_user.id, '–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
        bot.register_next_step_handler(message, username)
    elif message.text == '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ':
        text = '[–ü–æ–¥–µ–ª–∏—Ç—å—Å—è](https://vk.com/share.php?url=http%3A%2F%2Ft.me/my_reincarnation_bot%2F&title=–ú–æ–π%20—Ä–µ–∑—É–ª—å—Ç–∞—Ç%20' \
     '—Ç–µ—Å—Ç–∞%3A%20–ö–¢–û%20–¢–í–û–ï%20–¢–û–¢–ï–ú–ù–û–ï%20–ñ–ò–í–û–¢–ù–û–ï%3F)'
        bot.send_message(message.chat.id, text, parse_mode='MarkdownV2')
    elif message.text == '–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É':
        question(message)
    else:
        bot.send_message(message.chat.id, text='–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


def question(message):
    global i, count

    with connection.cursor() as cursor:
        i += 1 #–°—á–µ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞

        if i <= count:
            cursor.execute(f'SELECT question FROM question WHERE id_question = {i}')
            question = cursor.fetchone()
            cursor.execute(f'SELECT answer FROM question WHERE id_answer = {i}.1')
            answer1 = str(*cursor.fetchone())
            cursor.execute(f'select answer from question where id_answer = {i}.2')
            answer2 = str(*cursor.fetchone())
            cursor.execute(f'select answer from question where id_answer = {i}.3')
            answer3 = str(*cursor.fetchone())
            cursor.execute(f'select answer from question where id_answer = {i}.4')
            answer4 = str(*cursor.fetchone())


            murkup_q = types.InlineKeyboardMarkup(row_width=1)
            answer_1 = types.InlineKeyboardButton(text=answer1, callback_data='answer_1')
            answer_2 = types.InlineKeyboardButton(text=answer2, callback_data='answer_2')
            answer_3 = types.InlineKeyboardButton(text=answer3, callback_data='answer_3')
            answer_4 = types.InlineKeyboardButton(text=answer4, callback_data='answer_4')

            murkup_q.add(answer_1, answer_2, answer_3, answer_4)
            bot.send_message(message.chat.id, *question, reply_markup=murkup_q)

        else:
            markup = types.InlineKeyboardMarkup(row_width=1)
            res = types.InlineKeyboardButton(text='–ö–æ–Ω–µ—á–Ω–æ!', callback_data='results')
            markup.add(res)
            bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Ç—ã?', reply_markup=markup)




def username(message): #–û—Ç–∑—ã–≤—ã
    global username
    username = message.text
    bot.send_message(message.from_user.id, '–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ')
    bot.register_next_step_handler(message, reviews)

def reviews(message):
    global review
    review = message.text
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    key_yes = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='yes')
    key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')

    keyboard.add(key_yes, key_no)
    bot.send_message(message.from_user.id, text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    global i, animal
    if call.message:
        with connection.cursor() as cursor:
            if call.data == 'answer_1':
                with connection.cursor() as cursor:
                    cursor.execute(f'select animal_name, answer_{i}_1 from animals')
                    answers = cursor.fetchall()
                    for animal_name, answer in answers:
                        if answer is not None and answer != 0:
                            animal[animal_name].append(answer)
                question(message=call.message)

            elif call.data == 'answer_2':
                with connection.cursor() as cursor:
                    cursor.execute(f'select animal_name, answer_{i}_2 from animals')
                    answers = cursor.fetchall()
                    for animal_name, answer in answers:
                        if answer is not None and answer != 0:
                            animal[animal_name].append(answer)
                question(message=call.message)

            elif call.data == 'answer_3':
                with connection.cursor() as cursor:
                    cursor.execute(f'select animal_name, answer_{i}_3 from animals')
                    answers = cursor.fetchall()
                    for animal_name, answer in answers:
                        if answer is not None and answer != 0:
                            animal[animal_name].append(answer)
                question(message=call.message)

            elif call.data == 'answer_4':
                with connection.cursor() as cursor:
                    cursor.execute(f'select animal_name, answer_{i}_4 from animals')
                    answers = cursor.fetchall()
                    for animal_name, answer in answers:
                        if answer is not None and answer != 0:
                            animal[animal_name].append(answer)
                question(message=call.message)

            elif call.data == 'yes':
                cursor.execute("INSERT INTO reviews (id_user, username, review) VALUES (%s, %s, %s)",
                               (call.message.chat.id, username, review))
                connection.commit()
                bot.send_message(call.message.chat.id, text="–°–ø–∞—Å–∏–±–æ!")
            elif call.data == 'no':
                bot.send_message(call.message.chat.id,
                                 text="–¢–∏–º–æ—Ñ–µ–π —è–≤–Ω–æ —Ä–∞—Å—Å—Ç—Ä–æ–∏—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –Ω–∞–π–¥—ë—Ç—Å—è –ø–∞—Ä–∞ —Å–ª–æ–≤ —Ö–æ—Ç—è –±—ã –≤ –µ–≥–æ –∞–¥—Ä–µ—Å?")

            elif call.data == 'results':
                # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                max_sum = max(sum(animal[key]) for key in animal)
                max_animals = [key for key in animal if sum(animal[key]) == max_sum]

                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å—Ä–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö
                random_max_animal = random.choice(max_animals)
                print(max_animals)
                print(random_max_animal)
                with connection.cursor() as cursor:
                    cursor.execute(
                        f"SELECT image, result_text, animal_url FROM animals WHERE animal_name = '{random_max_animal}'")
                    itog_animal = list(cursor.fetchall())

                bot.send_message(call.message.chat.id,
                                 text=str(itog_animal[0][1]) + ' ' + str(itog_animal[0][
                                                                             0]) + ' ' + '–ú–æ–∂–µ—Ç —Ç—ã —Ö–æ—á–µ—à—å –æ–ø–µ–∫–∞—Ç—å —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ? –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç—É—Ç: +7 (958) 813-15-60 –ª–∏–±–æ –ø–æ –ø–æ—á—Ç–µ a.sharapova@moscowzoo.ru')


bot.polling(none_stop=True)